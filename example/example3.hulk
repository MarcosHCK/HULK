if (! 8 == 9) 3 else 6 + 7;

while (4 == 5) 7 + 4;

let b = 9 in {

  let a = 5 in b + a;
};

function printn (n)
{
  n * 2 + printn (n - 1);
}

printn ("ds");

protocol Clonable
{
  clone (): Clonable;
}

type Queue (a) inherits object
{
  head: number = 0;

  push (elm: number) => elm;
  pop () => false;

  reverse (h) => self.head := h;

  current () => 5;
  next () => true;
} default;

type SQueue (a, b) inherits Queue (a * 2)
{
}

let a = new Queue () in
{
  for (e in a) printn (e);
};
